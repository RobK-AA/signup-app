[{"/Users/robertkornblum/Desktop/signup-app/src/components/App.js":"1","/Users/robertkornblum/Desktop/signup-app/src/index.js":"2","/Users/robertkornblum/Desktop/signup-app/src/serviceWorker.js":"3","/Users/robertkornblum/Desktop/signup-app/src/components/User.js":"4","/Users/robertkornblum/Desktop/signup-app/src/components/Root.js":"5","/Users/robertkornblum/Desktop/signup-app/src/components/Signup/signup.jsx":"6","/Users/robertkornblum/Desktop/signup-app/src/components/Login/login.jsx":"7"},{"size":389,"mtime":1610656326276,"results":"8","hashOfConfig":"9"},{"size":829,"mtime":1610749624706,"results":"10","hashOfConfig":"9"},{"size":5729,"mtime":1610642859860,"results":"11","hashOfConfig":"9"},{"size":599,"mtime":1610652689295,"results":"12","hashOfConfig":"9"},{"size":323,"mtime":1610652613433,"results":"13","hashOfConfig":"9"},{"size":5540,"mtime":1610732422695,"results":"14","hashOfConfig":"9"},{"size":5663,"mtime":1610738424943,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"3hkmmd",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"18"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"18"},"/Users/robertkornblum/Desktop/signup-app/src/components/App.js",[],["33","34"],"/Users/robertkornblum/Desktop/signup-app/src/index.js",[],"/Users/robertkornblum/Desktop/signup-app/src/serviceWorker.js",[],"/Users/robertkornblum/Desktop/signup-app/src/components/User.js",[],"/Users/robertkornblum/Desktop/signup-app/src/components/Root.js",[],"/Users/robertkornblum/Desktop/signup-app/src/components/Signup/signup.jsx",["35","36"],"import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { gql, useMutation } from '@apollo/client';\n\nconst SIGNUP_MUTATION = gql`\n        mutation SignupMutation(\n            $email: String!\n            $username: String!\n            $name: String!\n            $password: String!\n            $picture: String!\n        ) {\n            signup(\n                email: $email\n                password: $password\n                name: $name\n                username: $username\n                picture: $picture\n            ) {\n                token\n            }\n        }\n    `;\n\nclass Signup extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            name: \"\",\n            username: \"\",\n            email: \"\",\n            password: \"\",\n            confirmPassword: \"\",\n            picture: null,\n            pictureUrl: \"https://img.icons8.com/ios-glyphs/100/000000/test-account.png\",\n            errors: {}\n        }\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.addPhoto = this.addPhoto.bind(this);\n    }\n\n    componentWillReceiveProps(nextProps) {\n        this.setState({ errors: nextProps.errors });\n    }\n\n    update(field) {\n        return e => {\n            if (this.props.errors) this.props.clearErrors();\n            this.setState({\n                [field]: e.currentTarget.value\n            });\n        };\n    }\n    \n    handleSubmit(e) {\n        e.preventDefault();\n        const user = new FormData();\n        user.append(\"user[name]\", this.state.name);\n        user.append(\"user[username]\", this.state.username);\n        user.append(\"user[email]\", this.state.email);\n        user.append(\"user[password]\", this.state.password);\n        user.append(\"user[picture]\", this.state.picture);\n    \n        this.props.createUser(user).then(\n            () => {\n                return this.props.history.push(`/confirmation`, this.state)\n            }\n        );\n    }\n\n    addPhoto(e) {\n        e.preventDefault();\n        const profilePhoto = new FileReader();\n        const photo = e.target.files[0];\n\n        profilePhoto.onloadend = () => {\n            let newPhotoUrl = this.state.pictureUrl;\n            newPhotoUrl = profilePhoto.result\n\n            let newPhoto = this.state.picture;\n            newPhoto = photo;\n\n            this.setState({ pictureUrl: newPhotoUrl, picture: newPhoto });\n        }\n\n        if (photo) {\n            profilePhoto.readAsDataURL(photo);\n        } else {\n            alert(\"Please choose another file type\")\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"form-container\">\n                <h1>Sign up here!</h1>\n                <p className=\"required-field\">* = required field</p>\n                <form onSubmit={this.handleSubmit}>\n                    <div className=\"form-item\">\n                        <label>Username*</label>\n                        <div className=\"input-item\">\n                            <input onChange={this.update('username')} type='text'></input>\n                        </div>\n                    </div>\n                    <div className=\"form-item\">\n                        <label>Email*</label>\n                        <div className=\"input-item\">\n                            <input onChange={this.update('email')} type='text'></input>\n                        </div>\n                    </div>\n                    <div className=\"form-item\">\n                        <label>Name*</label>\n                        <div className=\"input-item\">\n                            <input onChange={this.update('name')} type='text'></input>\n                        </div>\n                    </div>\n                    <div className=\"form-item\">\n                        <label>Password*</label>\n                        <div className=\"input-item\">\n                            <input onChange={this.update('password')} type='text'></input>\n                        </div>\n                    </div>\n                    <div className=\"form-item\">\n                        <label>Confirm Password*</label>\n                        <div className=\"input-item\">\n                            <input onChange={this.update('confirmPassword')} type='text'></input>\n                        </div>\n                    </div>\n                    <div className=\"form-item\">\n                        <label>Picture*</label>\n                        <div style={{ backgroundImage: `url(${this.state.pictureUrl})` }} className=\"picture-container\"></div>\n                    </div>\n                    <label className=\"profile-photo\" htmlFor=\"profile-photo\"></label>\n                        <div className=\"photo-input-item\">\n                            <input \n                                onChange={this.addPhoto} \n                                id=\"profile-photo\" \n                                className=\"photo-input\" \n                                type=\"file\"\n                            />\n                        </div>\n                    <p>Already have an account?</p>\n                    <p><Link to=\"/login\">Log in</Link></p>\n                    <button type=\"submit\">Sign Up!</button>\n                </form>\n                <div>\n                    <p>{this.state.username}</p>\n                    <p>{this.state.email}</p>\n                    <p>{this.state.name}</p>\n                    <p>{this.state.password}</p>\n                    <p>{this.state.confirmPassword}</p>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Signup;","/Users/robertkornblum/Desktop/signup-app/src/components/Login/login.jsx",["37","38"],"import React, { useState } from 'react';\nimport { gql, useMutation } from '@apollo/client';\nimport { useHistory } from 'react-router';\nconst AUTH_TOKEN = 'auth-token';\n\nconst SIGNUP_MUTATION = gql`\n        mutation SignupMutation(\n            $email: String!\n            $username: String!\n            $name: String!\n            $password: String!\n            $picture: String!\n        ) {\n            signup(\n                email: $email\n                password: $password\n                name: $name\n                username: $username\n                picture: $picture\n            ) {\n                token\n            }\n        }\n    `;\n\nconst LOGIN_MUTATION = gql`\n  mutation LoginMutation(\n    $email: String!\n    $password: String!\n  ) {\n    login(email: $email, password: $password) {\n      token\n    }\n  }\n`;\n\nconst Login = () => {\n  const history = useHistory();\n  const [formState, setFormState] = useState({\n    login: true,\n    email: '',\n    password: '',\n    name: '', \n    username: '',\n    confirmPassword: \"\",\n    picture: null,\n    pictureUrl: \"https://img.icons8.com/ios-glyphs/100/000000/test-account.png\",\n    errors: {}\n  });\n\n  const [login, {loading, error}] = useMutation(LOGIN_MUTATION, {\n    variables: {\n      email: formState.email,\n      password: formState.password\n    },\n    onCompleted: ({ login }) => {\n      localStorage.setItem(AUTH_TOKEN, login.token);\n      history.push('/');\n    }\n  });\n\n  const [signup] = useMutation(SIGNUP_MUTATION, {\n    variables: {\n      name: formState.name,\n      email: formState.email,\n      password: formState.password,\n      username: formState.username,\n      picture: formState.picture\n    },\n    onCompleted: ({ signup }) => {\n      localStorage.setItem(AUTH_TOKEN, signup.token);\n      history.push('/');\n    }\n  });\n\n  function addPhoto(e) {\n    e.preventDefault();\n    const profilePhoto = new FileReader();\n    const photo = e.target.files[0];\n\n    profilePhoto.onloadend = () => {\n        let newPhotoUrl = formState.pictureUrl;\n        newPhotoUrl = profilePhoto.result\n\n        let newPhoto = formState.picture;\n        newPhoto = photo;\n\n        setFormState({ \n            ...formState,\n            pictureUrl: newPhotoUrl, \n            picture: newPhoto \n        });\n    }\n        if (photo) {\n            profilePhoto.readAsDataURL(photo);\n        } else {\n            alert(\"Please choose another file type\")\n        }\n  }\n\n  return (\n    <div>\n      <h4 className=\"mv3\">{formState.login ? 'Login' : 'Sign Up'}</h4>\n      <div className=\"flex flex-column\">\n        {!formState.login && (\n          <>\n          <label>Username*</label>\n          <input\n            value={formState.username}\n            onChange={(e) =>\n              setFormState({\n                ...formState,\n                username: e.target.value\n              })\n            }\n            type=\"text\"\n            placeholder=\"Your username\"\n          />\n          </>\n        )}\n        {!formState.login && (\n          <>\n          <label>Name*</label>\n          <input\n            value={formState.name}\n            onChange={(e) =>\n              setFormState({\n                ...formState,\n                name: e.target.value\n              })\n            }\n            type=\"text\"\n            placeholder=\"Your name\"\n          />\n          </>\n        )}\n        <label>Email Address*</label>\n        <input\n          value={formState.email}\n          onChange={(e) =>\n            setFormState({\n              ...formState,\n              email: e.target.value\n            })\n          }\n          type=\"text\"\n          placeholder=\"Your email address\"\n        />\n        {!formState.login && (\n          <>\n          <div className=\"form-item\">\n              <label>Picture*</label>\n              <div style={{ backgroundImage: `url(${formState.pictureUrl})` }} className=\"picture-container\"></div>\n          </div>\n          <div className=\"photo-input-item\">\n          <input \n              onChange={addPhoto} \n              id=\"profile-photo\" \n              className=\"photo-input\" \n              type=\"file\"\n          />\n          </div>\n          </>\n        )}\n        <label>Password*</label>\n        <input\n          value={formState.password}\n          onChange={(e) =>\n            setFormState({\n              ...formState,\n              password: e.target.value\n            })\n          }\n          type=\"password\"\n          placeholder=\"Choose a safe password\"\n        />\n        {!formState.login && (\n          <div className=\"form-item\">\n              <label>Confirm Password*</label>\n              <div className=\"input-item\">\n                  <input \n                  value={formState.confirmPassword}\n                  onChange={(e) =>\n                      setFormState({\n                          ...formState,\n                          confirmPassword: e.target.value\n                      })}\n                  type=\"text\"\n                  placeholder=\"Confirm your password\"></input>\n              </div>\n          </div>\n        )}\n      </div>\n      <div className=\"flex mt3\">\n        <button\n          className=\"pointer mr2 button\"\n          onClick={formState.login ? login : signup}\n        >\n          {formState.login ? 'login' : 'create account'}\n        </button>\n        <button\n          className=\"pointer button\"\n          onClick={(e) =>\n            setFormState({\n              ...formState,\n              login: !formState.login\n            })\n          }\n        >\n          {formState.login\n            ? 'need to create an account?'\n            : 'already have an account?'}\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Login;",{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":3,"column":15,"nodeType":"45","messageId":"46","endLine":3,"endColumn":26},{"ruleId":"43","severity":1,"message":"47","line":5,"column":7,"nodeType":"45","messageId":"46","endLine":5,"endColumn":22},{"ruleId":"43","severity":1,"message":"48","line":51,"column":18,"nodeType":"45","messageId":"46","endLine":51,"endColumn":25},{"ruleId":"43","severity":1,"message":"49","line":51,"column":27,"nodeType":"45","messageId":"46","endLine":51,"endColumn":32},"no-native-reassign",["50"],"no-negated-in-lhs",["51"],"no-unused-vars","'useMutation' is defined but never used.","Identifier","unusedVar","'SIGNUP_MUTATION' is assigned a value but never used.","'loading' is assigned a value but never used.","'error' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]